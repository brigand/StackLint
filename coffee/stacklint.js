// Generated by CoffeeScript 1.6.3
/* StackLint (c) FakeRainBrigand 2013
  This file is for abstract and helper functions, and the lint evaluators.
*/


(function() {
  var lints, root;

  root = typeof window !== "undefined" && window !== null ? window : module.exports;

  /*
    Lints
      These define problems in the question by examining the question structure.
      Each must provide a `test` function which returns true or false
      true means that there is no problem, and the question fails inspection
  
      If additional data should be made available to the bindings, you may instead return an object, which
      can be accessed via myLint.test().propertyOnReturnedObject
  */


  lints = {
    containsCode: {
      test: function(question) {
        return question.code().length === 0;
      }
    },
    vagueError: {
      test: function(question) {
        var code, doesntShowError, mentionsError, text;
        text = question.text().join(' ').toLowerCase();
        mentionsError = text.indexOf('error') !== -1 || text.indexOf('exception') !== -1;
        code = question.code().join(' ').toLowerCase();
        doesntShowError = code.indexOf('error') === -1 && code.indexOf('exception') === -1;
        return mentionsError && doesntShowError;
      }
    },
    missingFiddle: {
      test: function(question) {
        var fiddleTags, link, missingFiddle, shouldHaveFiddle, tag, tagString, tags;
        fiddleTags = ['javascript', 'jquery', 'html', 'css', 'css3', 'html5', 'mootools', 'knockout'];
        tags = question.tags();
        tagString = tags.join(' ');
        shouldHaveFiddle = _.any((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = fiddleTags.length; _i < _len; _i++) {
            tag = fiddleTags[_i];
            _results.push(tagString.indexOf(tag) !== -1);
          }
          return _results;
        })());
        missingFiddle = !_.any((function() {
          var _i, _len, _ref, _results;
          _ref = question.links();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            link = _ref[_i];
            _results.push(link.href.indexOf("jsfiddle.net") !== -1);
          }
          return _results;
        })());
        console.log(shouldHaveFiddle, missingFiddle, tagString);
        return shouldHaveFiddle && missingFiddle;
      }
    },
    longLines: {
      test: function(question) {
        var line, lines, _i, _len;
        lines = question.code().join('\n').split('\n');
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          if (line.length > 80) {
            return true;
          }
        }
        return false;
      }
    },
    lotsOfCode: {
      test: function(question) {
        var chars, code, lines;
        code = question.code().join('\n');
        chars = code.replace(/\s+/g, "").length;
        lines = code.split('\n').length;
        if (question.tags.contains('sql')) {
          if (chars > 3000 || lines > 125) {
            return {
              chars: chars,
              lines: lines
            };
          } else {
            return false;
          }
        } else if (chars > 1000 || lines > 30) {
          return {
            chars: chars,
            lines: lines
          };
        } else {
          return false;
        }
      }
    },
    lotsOfText: {
      test: function(question) {
        var chars, text;
        text = question.text().join('\n');
        chars = text.replace(/\n+/g, "").length;
        if (chars > 1000) {
          return {
            chars: chars
          };
        } else {
          return false;
        }
      }
    },
    didntTry: {
      test: function(question) {
        var text, x;
        text = question.text().join(' ').toLowerCase();
        return !_.any([
          (function() {
            var _i, _len, _ref, _results;
            _ref = ['i tried', 'when i', 'i am trying'];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              _results.push(_.contains(text, x));
            }
            return _results;
          })()
        ]);
      }
    },
    howCanIDoThis: {
      test: function(question) {
        var code, codeChars, text;
        text = question.text().join(' ').toLowerCase();
        code = question.code().join('\n');
        codeChars = code.replace(/\s+/g, "").length;
        return _.contains(text, 'how can i do this') && codeChars < 100;
      }
    },
    aspRaw: {
      test: function(question) {
        var asp, css, js, source, tags;
        tags = question.tags().join(' ');
        asp = _.contains(tags, 'asp');
        css = _.contains(tags, 'css');
        js = _.contains(tags, 'js');
        source = question.code().join(' ').indexOf("<%=") !== -1;
        return asp && source && (css || js);
      }
    }
  };

  /* Exports*/


  root.sl = {
    makeLintObject: function(question) {
      var lint, name, output;
      output = [];
      for (name in lints) {
        lint = lints[name];
        lint = _.clone(lint);
        lint.test = ko.computed(lint.test.bind(output, question));
        output[name] = lint;
      }
      return output;
    }
  };

}).call(this);

/*
//@ sourceMappingURL=stacklint.map
*/
